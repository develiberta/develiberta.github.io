<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://develiberta.github.io/</id><title>Develiberta</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2025-04-02T22:42:03+09:00</updated> <author> <name>develiberta</name> <uri>https://develiberta.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://develiberta.github.io/feed.xml?v=1743601323"/><link rel="alternate" type="text/html" hreflang="en" href="https://develiberta.github.io/?v=1743601323"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 develiberta </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Protection</title><link href="https://develiberta.github.io/posts/os-protection/?v=1743601323" rel="alternate" type="text/html" title="Protection" /><published>2023-03-14T19:00:00+09:00</published> <updated>2023-03-14T19:00:00+09:00</updated> <id>https://develiberta.github.io/posts/os-protection/</id> <content src="https://develiberta.github.io/posts/os-protection/" /> <author> <name>Develiberta</name> </author> <category term="CS" /> <category term="OS" /> <summary> 목적 현대 컴퓨터 시스템에서 보호의 목적과 원칙에 대해 논의한다. 접근 행렬과 결합한 보호 도메인이 프로세스가 접근할 수 있는 자원을 지정하는 데 어떻게 사용되는지 설명한다. 자격- 및 언어- 기반의 보호 시스템을 설명한다. 보호 기법이 시스템 공격을 완화할 방법을 설명한다. 실천 목표 현대 컴퓨터 시스템에서 보호의 목적과 원칙에 대해 논의한다. 접근 행렬과 결합한 보호 도메인이 프로세스가 접근할 수 있는 자원을 지정하는 데 어떻게 사용되는지 설명한다. 자격- 및 언어- 기반의 보호 시스템을 설명한다. 보호 기법이 시스템 공격을 완화할 방법을 설명한다. 용어 보호 _Protection 컴퓨터 시스템에 의해 정의된 자원에 대한 프로세스... </summary> </entry> <entry><title>Security</title><link href="https://develiberta.github.io/posts/os-security/?v=1743601323" rel="alternate" type="text/html" title="Security" /><published>2023-03-14T18:30:00+09:00</published> <updated>2023-03-14T18:30:00+09:00</updated> <id>https://develiberta.github.io/posts/os-security/</id> <content src="https://develiberta.github.io/posts/os-security/" /> <author> <name>Develiberta</name> </author> <category term="CS" /> <category term="OS" /> <summary> 목적 보안상의 문제점들(threats)과 공격에 대해 논의한다. 암호화, 인증, 해싱의 근본 원리를 설명한다. 연산에 있어서 암호 작성법의 사용을 검토한다. 보안상의 공격에 대한 다양한 대응책을 논의한다. 실천 목표 보안상의 문제점들(threats)과 공격에 대해 논의한다. 암호화, 인증, 해싱의 근본 원리를 설명한다. 연산에 있어서 암호 작성법의 사용을 검토한다. 보안상의 공격에 대한 다양한 대응책을 논의한다. 용어 보안 _Security 시스템과 데이터의 무결성이 보존될 것이라는 확신의 척도 위협 _Threat 보안 위반에 대한 잠재적 가능성 공격 _Attack ... </summary> </entry> <entry><title>Storage Management</title><link href="https://develiberta.github.io/posts/os-storage-management/?v=1743601323" rel="alternate" type="text/html" title="Storage Management" /><published>2023-02-19T18:00:00+09:00</published> <updated>2023-03-14T21:18:39+09:00</updated> <id>https://develiberta.github.io/posts/os-storage-management/</id> <content src="https://develiberta.github.io/posts/os-storage-management/" /> <author> <name>Develiberta</name> </author> <category term="CS" /> <category term="OS" /> <summary> 목적 물리적 스토리지의 구조를 이해한다. 논리적 스토리지에서 파일을 저장하는 방법을 설명한다. 실천 목표 물리적 스토리지의 구조를 이해한다. 논리적 스토리지에서 파일을 저장하는 방법을 설명한다. 물리적 스토리지 비휘발성으로 컴퓨터의 보조적인 저장장치 HDD, SDD, Flash Memory, NAND Memory magnetic tapes, optical disks, cloud storage HDD moving-head disk mechanism HDD Scheduling 스케줄링은 seek time을 최소화하고 bandwidth를 최대화하는 방향으로 진행 seek time - disk bandwidth -... </summary> </entry> <entry><title>Virtual Memroy</title><link href="https://develiberta.github.io/posts/os-virtual-memory/?v=1743601323" rel="alternate" type="text/html" title="Virtual Memroy" /><published>2023-02-19T18:00:00+09:00</published> <updated>2023-02-26T22:05:46+09:00</updated> <id>https://develiberta.github.io/posts/os-virtual-memory/</id> <content src="https://develiberta.github.io/posts/os-virtual-memory/" /> <author> <name>Develiberta</name> </author> <category term="CS" /> <category term="OS" /> <summary> 목적 가상 메모리를 정의하고 그 이점을 설명한다 요구 페이징을 사용하여 페이지가 메모리에 적재되는 방법을 설명한다. FIFO, 최적 및 LRU 페이지 교체 알고리즘을 적용한다. 프로세스의 작업 집합을 설명하고 프로그램 지역성과 어떤 관련이 있는지 설명한다. Linux, Windows 10 및 Solaris가 가상 메모리를 관리하는 방법을 설명한다. C 프로그래밍 언어로 가상 메모리 관리자 시뮬레이션을 설계한다. 실천 목표 가상 메모리가 무엇인지 이해하고 필요성을 설명한다. 요구 페이징을 이용해서 페이지가 메모리에 적재되는 과정을 이해한다. 페이지 교체 알고리즘을 설명하고 문제에 대해 각 페이지 교체 알고리즘을 이용해서 해결한다. 프로세스의 작업 집합을 설명... </summary> </entry> <entry><title>Main Memroy</title><link href="https://develiberta.github.io/posts/os-main-memory/?v=1743601323" rel="alternate" type="text/html" title="Main Memroy" /><published>2023-02-05T18:00:00+09:00</published> <updated>2023-02-12T19:08:32+09:00</updated> <id>https://develiberta.github.io/posts/os-main-memory/</id> <content src="https://develiberta.github.io/posts/os-main-memory/" /> <author> <name>Develiberta</name> </author> <category term="CS" /> <category term="OS" /> <summary> 목적 논리 주소와 물리 주소의 차이점과 주소를 변환할 때 MMU(메모리 관리 장치)의 역할을 설명한다. 메모리를 연속적으로 할당하기 위해 최초, 최적 및 최악 접합 전략을 적용한다. 내부 및 외부 단편화의 차이점을 설명한다. TLB (translation look-aside buffer)가 포함된 페이징 시스템에서 논리 주소를 물리 주소로 변환한다. 계층적 페이징, 해시 페이징 및 역 페이지 테이블을 설명한다. IA-32, x86-64 및 ARMv8 아키텍처의 주소 변환에 관해 설명한다. 실천 목표 기본 하드웨어에서 메인 메모리의 역할을 이해한다. 프로세스에 메모리 주소가 할당되는 과정을 이해한다. 기호(또는 가상) 메모리 주소와 실제 메모리 주소와의 연결을 ... </summary> </entry> </feed>
